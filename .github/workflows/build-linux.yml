name: Build Linux Packages

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'LenovoLegionToolkit.Avalonia/LenovoLegionToolkit.Avalonia.csproj'

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          dpkg-dev \
          debhelper \
          fakeroot \
          lintian \
          rpm \
          libx11-dev \
          libice-dev \
          libsm-dev \
          libfontconfig1-dev

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build application
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          -c Release \
          -r linux-x64 \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:TrimMode=link \
          -o ./publish

    - name: Run tests
      run: |
        if [ -f "LenovoLegionToolkit.Avalonia.Tests/LenovoLegionToolkit.Avalonia.Tests.csproj" ]; then
          dotnet test LenovoLegionToolkit.Avalonia.Tests/LenovoLegionToolkit.Avalonia.Tests.csproj \
            --configuration Release \
            --logger "console;verbosity=normal"
        fi
      continue-on-error: true

    - name: Create Debian package
      run: |
        chmod +x Scripts/build-ubuntu-package.sh
        ./Scripts/build-ubuntu-package.sh

    - name: Create AppImage
      run: |
        # Download appimagetool
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage

        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

        # Copy files
        cp publish/LegionToolkit AppDir/usr/bin/
        chmod +x AppDir/usr/bin/LegionToolkit

        # Copy icon (AppImage needs it in both locations)
        cp assets/logo.png AppDir/legion-toolkit.png
        cp assets/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/legion-toolkit.png

        # Create desktop file
        cat > AppDir/legion-toolkit.desktop << EOF
        [Desktop Entry]
        Name=Legion Toolkit
        Exec=LegionToolkit
        Icon=legion-toolkit
        Type=Application
        Categories=System;Settings;
        EOF

        cp AppDir/legion-toolkit.desktop AppDir/usr/share/applications/

        # Create AppRun
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export PATH="${HERE}/usr/bin:${PATH}"
        exec "${HERE}/usr/bin/LegionToolkit" "$@"
        EOF
        chmod +x AppDir/AppRun

        # Build AppImage (use extract-and-run to avoid FUSE requirement)
        ARCH=x86_64 ./appimagetool-x86_64.AppImage --appimage-extract-and-run AppDir LegionToolkit-linux-x86_64.AppImage

    - name: Create tarball package
      run: |
        VERSION=$(grep -oP '(?<=<Version>)[^<]+' ${{ env.PROJECT_PATH }} || echo "3.0.0")
        mkdir -p legion-toolkit-linux-${VERSION}

        # Copy built files
        cp -r publish/* legion-toolkit-linux-${VERSION}/
        cp Scripts/ubuntu-installer.sh legion-toolkit-linux-${VERSION}/install.sh
        chmod +x legion-toolkit-linux-${VERSION}/install.sh

        # Create README
        cat > legion-toolkit-linux-${VERSION}/README.md << EOF
        # Legion Toolkit for Linux

        ## Quick Install
        Run: ./install.sh

        ## Manual Install
        sudo cp LegionToolkit /usr/local/bin/legion-toolkit
        sudo chmod +x /usr/local/bin/legion-toolkit

        ## Usage
        legion-toolkit --help
        EOF

        # Create archive
        tar -czf legion-toolkit-linux-${VERSION}.tar.gz legion-toolkit-linux-${VERSION}/

    - name: Upload Debian Package
      uses: actions/upload-artifact@v4
      with:
        name: debian-package
        path: build-ubuntu/*.deb

    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: appimage
        path: LegionToolkit-linux-x86_64.AppImage

    - name: Upload Tarball
      uses: actions/upload-artifact@v4
      with:
        name: tarball
        path: legion-toolkit-linux-*.tar.gz

  create-release:
    needs: build-linux
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          debian-package/*.deb
          appimage/*.AppImage
          tarball/*.tar.gz
        body: |
          # Legion Toolkit Linux Release

          ## Installation

          ### Ubuntu/Debian (.deb package)
          ```bash
          sudo dpkg -i legion-toolkit_*.deb
          sudo apt-get install -f
          ```

          ### AppImage (Universal)
          ```bash
          chmod +x LegionToolkit-linux-x86_64.AppImage
          ./LegionToolkit-linux-x86_64.AppImage
          ```

          ### Manual Installation (tar.gz)
          ```bash
          tar -xzf legion-toolkit-linux-*.tar.gz
          cd legion-toolkit-linux-*/
          ./install.sh
          ```

          ## Requirements
          - Linux kernel 5.4+
          - legion-laptop kernel module (recommended)
          - systemd

          ## What's New
          - Power mode management
          - Battery conservation control
          - RGB keyboard support
          - Thermal monitoring
          - System tray integration

        draft: false
        prerelease: false
        generate_release_notes: true