#!/bin/bash
# Enhanced Legion Laptop Kernel Module Post-Install Script
# Author: Vivek Chamoli
# Version: 2.0.0

set -e

MODULE_NAME="legion_laptop_enhanced"
MODULE_VERSION="2.0.0"
KERNEL_VERSION="${1:-$(uname -r)}"

echo "=== Legion Enhanced Kernel Module Post-Install ==="
echo "Module: $MODULE_NAME v$MODULE_VERSION"
echo "Kernel: $KERNEL_VERSION"

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Function to check if module is loaded
is_module_loaded() {
    lsmod | grep -q "^$1 "
}

# Function to safely unload old module
unload_old_module() {
    local old_module="$1"
    if is_module_loaded "$old_module"; then
        log "Unloading old module: $old_module"
        if ! rmmod "$old_module" 2>/dev/null; then
            log "Warning: Could not unload $old_module, it may be in use"
            return 1
        fi
    fi
    return 0
}

# Function to load new module
load_new_module() {
    local module="$1"
    log "Loading new module: $module"
    if modprobe "$module"; then
        log "Successfully loaded $module"
        return 0
    else
        log "Error: Failed to load $module"
        return 1
    fi
}

# Function to setup udev rules
setup_udev_rules() {
    local udev_file="/etc/udev/rules.d/99-legion-enhanced.rules"

    log "Setting up udev rules: $udev_file"

    cat > "$udev_file" << 'EOF'
# Enhanced Legion Laptop udev rules
# Generated by legion-laptop-enhanced kernel module

# Legion platform device
SUBSYSTEM=="platform", DRIVER=="legion_laptop_enhanced", GROUP="legion", MODE="0664"

# Legion sysfs attributes - allow legion group access
SUBSYSTEM=="platform", ATTR{legion_mode}=="*", GROUP="legion", MODE="0664"
SUBSYSTEM=="platform", ATTR{thermal_mode}=="*", GROUP="legion", MODE="0664"
SUBSYSTEM=="platform", ATTR{battery_conservation}=="*", GROUP="legion", MODE="0664"
SUBSYSTEM=="platform", ATTR{rapid_charge}=="*", GROUP="legion", MODE="0664"
SUBSYSTEM=="platform", ATTR{fn_lock}=="*", GROUP="legion", MODE="0664"
SUBSYSTEM=="platform", ATTR{rgb_mode}=="*", GROUP="legion", MODE="0664"

# Legacy compatibility for standard legion-laptop paths
KERNEL=="legion_laptop", GROUP="legion", MODE="0664"
SUBSYSTEM=="platform", KERNEL=="PNP0C09:*", DRIVER=="legion_laptop*", GROUP="legion", MODE="0664"

# Thermal zones for Legion laptops
SUBSYSTEM=="thermal", KERNEL=="thermal_zone*", ATTRS{type}=="legion_*", GROUP="legion", MODE="0664"

# Power supply attributes
SUBSYSTEM=="power_supply", KERNEL=="BAT*", ATTR{charge_control_*}=="*", GROUP="legion", MODE="0664"
EOF

    # Reload udev rules
    if command -v udevadm >/dev/null 2>&1; then
        log "Reloading udev rules"
        udevadm control --reload-rules
        udevadm trigger --subsystem-match=platform --subsystem-match=thermal --subsystem-match=power_supply
    fi
}

# Function to create legion group
create_legion_group() {
    if ! getent group legion >/dev/null 2>&1; then
        log "Creating legion group"
        groupadd -r legion
    else
        log "Legion group already exists"
    fi
}

# Function to setup module loading configuration
setup_module_config() {
    local modules_load_file="/etc/modules-load.d/legion-enhanced.conf"
    local modprobe_file="/etc/modprobe.d/legion-enhanced.conf"

    log "Setting up module loading configuration"

    # Module loading configuration
    echo "legion_laptop_enhanced" > "$modules_load_file"

    # Module options configuration
    cat > "$modprobe_file" << 'EOF'
# Enhanced Legion Laptop module configuration
options legion_laptop_enhanced debug=0 force_load=0
alias platform:legion_laptop legion_laptop_enhanced
blacklist legion_laptop
EOF

    log "Module configuration created"
}

# Function to backup original legion-laptop module
backup_original_module() {
    if [ -z "$KERNEL_VERSION" ]; then
        log "Skipping backup - kernel version not specified"
        return 0
    fi

    local orig_module_path="/lib/modules/$KERNEL_VERSION/kernel/drivers/platform/x86/legion-laptop.ko"
    local backup_path="/lib/modules/$KERNEL_VERSION/kernel/drivers/platform/x86/legion-laptop.ko.backup"

    if [ -f "$orig_module_path" ] && [ ! -f "$backup_path" ]; then
        log "Backing up original legion-laptop module"
        cp "$orig_module_path" "$backup_path"
    fi
}

# Function to verify installation
verify_installation() {
    # Check module info (works regardless of kernel version)
    if modinfo "$MODULE_NAME" >/dev/null 2>&1; then
        log "✓ Module info available"
        modinfo "$MODULE_NAME" | grep -E "^(version|description|author):" || true

        # Try to find the actual module path
        local module_path=$(modinfo -n "$MODULE_NAME" 2>/dev/null)
        if [ -n "$module_path" ] && [ -f "$module_path" ]; then
            log "✓ Module installed at: $module_path"
        fi
        return 0
    else
        log "✗ Module info not available"
        return 1
    fi
}

# Main installation process
main() {
    log "Starting post-install process"

    # Create legion group
    create_legion_group

    # Backup original module
    backup_original_module

    # Unload conflicting modules
    unload_old_module "legion_laptop" || true

    # Setup configuration
    setup_module_config
    setup_udev_rules

    # Update module dependencies
    log "Updating module dependencies"
    depmod -a "$KERNEL_VERSION"

    # Verify installation
    if verify_installation; then
        log "✓ Installation verification passed"
    else
        log "✗ Installation verification failed"
        exit 1
    fi

    # Try to load the new module
    if load_new_module "$MODULE_NAME"; then
        log "✓ Module loaded successfully"

        # Show module status
        if [ -d "/sys/kernel/legion_laptop" ]; then
            log "✓ Legion sysfs interface available"
            ls -la /sys/kernel/legion_laptop/ 2>/dev/null || true
        fi
    else
        log "⚠ Module could not be loaded immediately"
        log "This is normal and the module will be loaded on next boot"
    fi

    log "=== Post-install completed successfully ==="
    echo ""
    echo "Legion Enhanced Kernel Module has been installed!"
    echo "- Add your user to the 'legion' group: sudo usermod -a -G legion \$USER"
    echo "- Reboot to ensure the module is loaded properly"
    echo "- Check status with: lsmod | grep legion"
}

# Run main function
main "$@"